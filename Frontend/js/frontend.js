// Generated by IcedCoffeeScript 1.4.0c
(function() {
  var Frontend, iced, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  Frontend = (function() {

    function Frontend() {}

    Frontend.prototype.renderTemplate = function(templateName, data, callback) {
      var html, template, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/zgrannan/Dropbox/cse110/Frontend/coffee/frontend.iced",
          funcname: "Frontend.renderTemplate"
        });
        $.get("/jst/" + templateName + ".jst", __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return template = arguments[0];
            };
          })(),
          lineno: 3
        }));
        __iced_deferrals._fulfill();
      })(function() {
        html = Mustache.render(template, data);
        return callback(html);
      });
    };

    return Frontend;

  })();

  window.frontend = new Frontend;

}).call(this);
