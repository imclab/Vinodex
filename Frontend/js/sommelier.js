// Generated by IcedCoffeeScript 1.4.0c
(function() {
  var iced, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  $(function() {
    var byPairs, byWines, html, sommelierData, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "/Users/zgrannan/Dropbox/cse110/Frontend/coffee/sommelier.iced"
      });
      backend.Sommelier.get({
        limit: 1000
      }, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return sommelierData = arguments[0];
          };
        })(),
        lineno: 2
      }));
      __iced_deferrals._fulfill();
    })(function() {
      console.log(sommelierData);
      byPairs = _.groupBy(sommelierData, "pairing");
      byWines = _.groupBy(sommelierData, "wine_type");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/zgrannan/Dropbox/cse110/Frontend/coffee/sommelier.iced"
        });
        frontend.renderTemplate("select_meal_dropdown", {
          meals: _.keys(byPairs)
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return html = arguments[0];
            };
          })(),
          lineno: 6
        }));
        __iced_deferrals._fulfill();
      })(function() {
        $("#meal-select-form").append(html);
        return $("select.span3").change(function() {
          var pairs, wineHtml, wineTypeHtml, wineTypes, wines, ___iced_passed_deferral1, __iced_deferrals, __iced_k,
            _this = this;
          __iced_k = __iced_k_noop;
          ___iced_passed_deferral1 = iced.findDeferral(arguments);
          pairs = byPairs[$(this).val()];
          wineTypes = _.uniq(_.pluck(pairs, "wine_type"));
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral1,
              filename: "/Users/zgrannan/Dropbox/cse110/Frontend/coffee/sommelier.iced"
            });
            backend.Wine.get({
              wine_type__in: wineTypes.join(","),
              limit: 10,
              order: 'rand'
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return wines = arguments[0];
                };
              })(),
              lineno: 16
            }));
            __iced_deferrals._fulfill();
          })(function() {
            wines = _.map(wines, function(wine) {
              wine.description = byWines[wine.wine_type][0].description;
              return wine;
            });
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral1,
                filename: "/Users/zgrannan/Dropbox/cse110/Frontend/coffee/sommelier.iced"
              });
              frontend.renderTemplate("sommelier_wines", {
                wines: wines
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return wineHtml = arguments[0];
                  };
                })(),
                lineno: 22
              }));
              frontend.renderTemplate("sommelier_winetypes", {
                pairs: pairs
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return wineTypeHtml = arguments[0];
                  };
                })(),
                lineno: 23
              }));
              __iced_deferrals._fulfill();
            })(function() {
              $("#wines").html(wineHtml);
              $("#suggestions").html(wineTypeHtml);
              return $(".winetype").tooltip();
            });
          });
        });
      });
    });
  });

}).call(this);
