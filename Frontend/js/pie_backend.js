// Generated by IcedCoffeeScript 1.4.0c
(function() {
  var PieBackend, iced, plus, priceOf, sum, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  priceOf = function(bottle) {
    if (bottle.price) {
      return bottle.price;
    } else if (bottle.wine.retail_price) {
      return bottle.wine.retail_price;
    } else if (bottle.wine.min_price && bottle.wine.max_price) {
      return (bottle.wine.min_price + bottle.wine.max_price) / 2;
    } else {
      return bottle.max_price || bottle.min_price || 0;
    }
  };

  plus = function(a, b) {
    return a + b;
  };

  sum = function(list) {
    return _.reduce(list, plus, 0);
  };

  PieBackend = (function() {

    function PieBackend(bottles) {
      this.bottles = bottles;
    }

    PieBackend.prototype.byPrice = function(bottles, label) {
      return {
        label: label,
        value: sum(_.map(bottles, function(bottle) {
          return bottle.num_bottles * priceOf(bottle);
        }))
      };
    };

    PieBackend.prototype.byNumBottles = function(bottles, label) {
      return {
        label: label,
        value: bottles.length
      };
    };

    PieBackend.prototype._render = function(partitions, groupBy) {
      if (groupBy == null) groupBy = this.byPrice;
      return _.map(partitions, groupBy);
    };

    PieBackend.prototype.cellar = function(groupBy) {
      var partitions;
      partitions = _.groupBy(this.bottles, function(bottle) {
        return bottle.cellar.name;
      });
      return this._render(partitions, groupBy);
    };

    PieBackend.prototype.wine = function(groupBy) {
      var partitions;
      partitions = _.groupBy(this.bottles, function(bottle) {
        return bottle.wine.name;
      });
      return this._render(partitions, groupBy);
    };

    PieBackend.prototype.winery = function(groupBy) {
      var getWineryName, partitions;
      getWineryName = function(bottle) {
        if (bottle.wine.winery) {
          return bottle.wine.winery.name;
        } else {
          return "None";
        }
      };
      partitions = _.groupBy(this.bottles, getWineryName);
      return this._render(partitions, groupBy);
    };

    PieBackend.prototype.color = function(groupBy) {
      var partitions;
      partitions = _.groupBy(this.bottles, function(bottle) {
        return bottle.wine.color;
      });
      return this._render(partitions, groupBy);
    };

    PieBackend.prototype.type = function(groupBy) {
      var partitions;
      partitions = _.groupBy(this.bottles, function(bottle) {
        return bottle.wine.wine_type;
      });
      return this._render(partitions, groupBy);
    };

    PieBackend.prototype.raw = function(partitionFunc, groupBy) {
      var partitions;
      partitions = _.groupBy(this.bottles, partitionFunc);
      return this._render(partitions, groupBy);
    };

    return PieBackend;

  })();

  window.createPieBackend = function(userId, callback) {
    var bottles, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "/Users/zgrannan/Dropbox/cse110/Frontend/coffee/pie_backend.iced",
        funcname: "createPieBackend"
      });
      window.backend.Bottle.get({
        "cellar__owner": userId,
        "limit": 0
      }, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return bottles = arguments[0];
          };
        })(),
        lineno: 61
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return callback(new PieBackend(bottles));
    });
  };

}).call(this);
